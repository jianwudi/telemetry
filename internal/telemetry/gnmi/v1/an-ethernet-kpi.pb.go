// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: an-ethernet-kpi.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EthernetPortKpiRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthernetPortKpiRecord []*EthernetPortKpiRecords_EthernetPortKpiRecord `protobuf:"bytes,1,rep,name=ethernet_port_kpi_record,json=ethernet-port-kpi-record,proto3" json:"ethernet_port_kpi_record,omitempty"`
}

func (x *EthernetPortKpiRecords) Reset() {
	*x = EthernetPortKpiRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_an_ethernet_kpi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetPortKpiRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetPortKpiRecords) ProtoMessage() {}

func (x *EthernetPortKpiRecords) ProtoReflect() protoreflect.Message {
	mi := &file_an_ethernet_kpi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetPortKpiRecords.ProtoReflect.Descriptor instead.
func (*EthernetPortKpiRecords) Descriptor() ([]byte, []int) {
	return file_an_ethernet_kpi_proto_rawDescGZIP(), []int{0}
}

func (x *EthernetPortKpiRecords) GetEthernetPortKpiRecord() []*EthernetPortKpiRecords_EthernetPortKpiRecord {
	if x != nil {
		return x.EthernetPortKpiRecord
	}
	return nil
}

type EthernetPortKpiRecords_EthernetPortKpiRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//ethernetCsmacd.f.s.p
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//��̫�ӿڷ��͵��ֽ���
	PortTxBytes uint64 `protobuf:"varint,2,opt,name=port_tx_bytes,json=port-tx-bytes,proto3" json:"port_tx_bytes,omitempty"`
	//��̫�ӿڽ��յ��ֽ���
	PortRxBytes uint64 `protobuf:"varint,3,opt,name=port_rx_bytes,json=port-rx-bytes,proto3" json:"port_rx_bytes,omitempty"`
	//��̫�ӿڷ��͵�֡��
	PortTxPackets uint64 `protobuf:"varint,4,opt,name=port_tx_packets,json=port-tx-packets,proto3" json:"port_tx_packets,omitempty"`
	//��̫�ӿڽ��յ�֡��
	PortRxPackets uint64 `protobuf:"varint,5,opt,name=port_rx_packets,json=port-rx-packets,proto3" json:"port_rx_packets,omitempty"`
	//��̫�ӿڷ��ͷ�������֡����һ����MAC��У������֡��
	PortTxDiscardPackets uint64 `protobuf:"varint,6,opt,name=port_tx_discard_packets,json=port-tx-discard-packets,proto3" json:"port_tx_discard_packets,omitempty"`
	//��̫�ӿڽ��շ�������֡����һ����MAC��У������֡��
	PortRxDiscardPackets uint64 `protobuf:"varint,7,opt,name=port_rx_discard_packets,json=port-rx-discard-packets,proto3" json:"port_rx_discard_packets,omitempty"`
	//��̫�ӿڽ��յĶ�������֡��
	PortRxAlignmentErrorPackets uint64 `protobuf:"varint,8,opt,name=port_rx_alignment_error_packets,json=port-rx-alignment-error-packets,proto3" json:"port_rx_alignment_error_packets,omitempty"`
	//��̫�ӿڷ��ͷ����CRC����֡��
	PortTxCrcErrorPackets uint64 `protobuf:"varint,9,opt,name=port_tx_crc_error_packets,json=port-tx-crc-error-packets,proto3" json:"port_tx_crc_error_packets,omitempty"`
	//��̫�ӿڽ��շ����CRC����֡��
	PortRxCrcErrorPackets uint64 `protobuf:"varint,10,opt,name=port_rx_crc_error_packets,json=port-rx-crc-error-packets,proto3" json:"port_rx_crc_error_packets,omitempty"`
	//��̫�ӿڷ��͵ĳ���֡��
	PortTxOversizedPackets uint64 `protobuf:"varint,11,opt,name=port_tx_oversized_packets,json=port-tx-oversized-packets,proto3" json:"port_tx_oversized_packets,omitempty"`
	//��̫�ӿڽ��յĳ���֡��
	PortRxOversizedPackets uint64 `protobuf:"varint,12,opt,name=port_rx_oversized_packets,json=port-rx-oversized-packets,proto3" json:"port_rx_oversized_packets,omitempty"`
	//��̫�ӿڷ��͵ĳ���֡�� ��֡��С��64����CRC��ȷ�İ���)
	PortTxUndersizedPackets uint64 `protobuf:"varint,13,opt,name=port_tx_undersized_packets,json=port-tx-undersized-packets,proto3" json:"port_tx_undersized_packets,omitempty"`
	//��̫�ӿڽ��յĳ���֡��
	PortRxUndersizedPackets uint64 `protobuf:"varint,14,opt,name=port_rx_undersized_packets,json=port-rx-undersized-packets,proto3" json:"port_rx_undersized_packets,omitempty"`
	//��̫�ӿڷ��͵ķ�Ƭ֡�� (֡��С��64����CRC����İ���)
	PortTxFragmentPackets uint64 `protobuf:"varint,15,opt,name=port_tx_fragment_packets,json=port-tx-fragment-packets,proto3" json:"port_tx_fragment_packets,omitempty"`
	//��̫�ӿڽ��յķ�Ƭ֡��
	PortRxFragmentPackets uint64 `protobuf:"varint,16,opt,name=port_rx_fragment_packets,json=port-rx-fragment-packets,proto3" json:"port_rx_fragment_packets,omitempty"`
	//��̫�ӿڷ��͵�Jabber֡��
	PortTxJabberPackets uint64 `protobuf:"varint,17,opt,name=port_tx_jabber_packets,json=port-tx-jabber-packets,proto3" json:"port_tx_jabber_packets,omitempty"`
	//��̫�ӿڽ��յ�Jabber֡��
	PortRxJabberPackets uint64 `protobuf:"varint,18,opt,name=port_rx_jabber_packets,json=port-rx-jabber-packets,proto3" json:"port_rx_jabber_packets,omitempty"`
	//��̫�ӿڷ��͵Ĵ���֡��
	PortTxErrorPackets uint64 `protobuf:"varint,19,opt,name=port_tx_error_packets,json=port-tx-error-packets,proto3" json:"port_tx_error_packets,omitempty"`
	//��̫�ӿڽ��յĴ���֡��
	PortRxErrorPackets uint64 `protobuf:"varint,20,opt,name=port_rx_error_packets,json=port-rx-error-packets,proto3" json:"port_rx_error_packets,omitempty"`
	//��̫�˿�����ƽ�����ʣ���λkbps
	PortTxRate uint64 `protobuf:"varint,21,opt,name=port_tx_rate,json=port-tx-rate,proto3" json:"port_tx_rate,omitempty"`
	//��̫�˿�����ƽ�����ʣ���λkbps
	PortRxRate uint64 `protobuf:"varint,22,opt,name=port_rx_rate,json=port-rx-rate,proto3" json:"port_rx_rate,omitempty"`
	//��̫�˿������뼶��ֵ���ʣ���λkbps
	PortTxPeakRate uint64 `protobuf:"varint,23,opt,name=port_tx_peak_rate,json=port-tx-peak-rate,proto3" json:"port_tx_peak_rate,omitempty"`
	//��̫�˿������뼶��ֵ���ʣ���λkbps
	PortRxPeakRate uint64 `protobuf:"varint,24,opt,name=port_rx_peak_rate,json=port-rx-peak-rate,proto3" json:"port_rx_peak_rate,omitempty"`
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) Reset() {
	*x = EthernetPortKpiRecords_EthernetPortKpiRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_an_ethernet_kpi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetPortKpiRecords_EthernetPortKpiRecord) ProtoMessage() {}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) ProtoReflect() protoreflect.Message {
	mi := &file_an_ethernet_kpi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetPortKpiRecords_EthernetPortKpiRecord.ProtoReflect.Descriptor instead.
func (*EthernetPortKpiRecords_EthernetPortKpiRecord) Descriptor() ([]byte, []int) {
	return file_an_ethernet_kpi_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxBytes() uint64 {
	if x != nil {
		return x.PortTxBytes
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxBytes() uint64 {
	if x != nil {
		return x.PortRxBytes
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxPackets() uint64 {
	if x != nil {
		return x.PortTxPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxPackets() uint64 {
	if x != nil {
		return x.PortRxPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxDiscardPackets() uint64 {
	if x != nil {
		return x.PortTxDiscardPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxDiscardPackets() uint64 {
	if x != nil {
		return x.PortRxDiscardPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxAlignmentErrorPackets() uint64 {
	if x != nil {
		return x.PortRxAlignmentErrorPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxCrcErrorPackets() uint64 {
	if x != nil {
		return x.PortTxCrcErrorPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxCrcErrorPackets() uint64 {
	if x != nil {
		return x.PortRxCrcErrorPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxOversizedPackets() uint64 {
	if x != nil {
		return x.PortTxOversizedPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxOversizedPackets() uint64 {
	if x != nil {
		return x.PortRxOversizedPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxUndersizedPackets() uint64 {
	if x != nil {
		return x.PortTxUndersizedPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxUndersizedPackets() uint64 {
	if x != nil {
		return x.PortRxUndersizedPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxFragmentPackets() uint64 {
	if x != nil {
		return x.PortTxFragmentPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxFragmentPackets() uint64 {
	if x != nil {
		return x.PortRxFragmentPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxJabberPackets() uint64 {
	if x != nil {
		return x.PortTxJabberPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxJabberPackets() uint64 {
	if x != nil {
		return x.PortRxJabberPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxErrorPackets() uint64 {
	if x != nil {
		return x.PortTxErrorPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxErrorPackets() uint64 {
	if x != nil {
		return x.PortRxErrorPackets
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxRate() uint64 {
	if x != nil {
		return x.PortTxRate
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxRate() uint64 {
	if x != nil {
		return x.PortRxRate
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortTxPeakRate() uint64 {
	if x != nil {
		return x.PortTxPeakRate
	}
	return 0
}

func (x *EthernetPortKpiRecords_EthernetPortKpiRecord) GetPortRxPeakRate() uint64 {
	if x != nil {
		return x.PortRxPeakRate
	}
	return 0
}

var File_an_ethernet_kpi_proto protoreflect.FileDescriptor

var file_an_ethernet_kpi_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x6e, 0x2d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x6b, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6b, 0x70, 0x69, 0x22, 0x8f, 0x0b, 0x0a, 0x16, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4b, 0x70, 0x69, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x79, 0x0a, 0x18, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x6b, 0x70, 0x69, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x4b, 0x70, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4b, 0x70, 0x69, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x18, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x6b, 0x70, 0x69, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0xf9,
	0x09, 0x0a, 0x15, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4b,
	0x70, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x78, 0x2d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x72, 0x78, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x78, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x72, 0x78, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x74, 0x78, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x78, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x78,
	0x2d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x48, 0x0a, 0x1f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x72, 0x78, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x74, 0x78, 0x2d, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x72, 0x78, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x72, 0x78, 0x2d, 0x63, 0x72, 0x63, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x74, 0x78, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x78,
	0x2d, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x78, 0x2d,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x78, 0x2d,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x78, 0x2d, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3a,
	0x0a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x78, 0x2d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x74, 0x78, 0x2d, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x6a, 0x61,
	0x62, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x78, 0x2d, 0x6a, 0x61, 0x62, 0x62,
	0x65, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x74, 0x78, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x78, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x74, 0x78, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x78, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x74, 0x78, 0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x78,
	0x2d, 0x70, 0x65, 0x61, 0x6b, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_an_ethernet_kpi_proto_rawDescOnce sync.Once
	file_an_ethernet_kpi_proto_rawDescData = file_an_ethernet_kpi_proto_rawDesc
)

func file_an_ethernet_kpi_proto_rawDescGZIP() []byte {
	file_an_ethernet_kpi_proto_rawDescOnce.Do(func() {
		file_an_ethernet_kpi_proto_rawDescData = protoimpl.X.CompressGZIP(file_an_ethernet_kpi_proto_rawDescData)
	})
	return file_an_ethernet_kpi_proto_rawDescData
}

var file_an_ethernet_kpi_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_an_ethernet_kpi_proto_goTypes = []interface{}{
	(*EthernetPortKpiRecords)(nil),                       // 0: an_ethernet_kpi.EthernetPortKpiRecords
	(*EthernetPortKpiRecords_EthernetPortKpiRecord)(nil), // 1: an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord
}
var file_an_ethernet_kpi_proto_depIdxs = []int32{
	1, // 0: an_ethernet_kpi.EthernetPortKpiRecords.ethernet_port_kpi_record:type_name -> an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_an_ethernet_kpi_proto_init() }
func file_an_ethernet_kpi_proto_init() {
	if File_an_ethernet_kpi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_an_ethernet_kpi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetPortKpiRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_an_ethernet_kpi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetPortKpiRecords_EthernetPortKpiRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_an_ethernet_kpi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_an_ethernet_kpi_proto_goTypes,
		DependencyIndexes: file_an_ethernet_kpi_proto_depIdxs,
		MessageInfos:      file_an_ethernet_kpi_proto_msgTypes,
	}.Build()
	File_an_ethernet_kpi_proto = out.File
	file_an_ethernet_kpi_proto_rawDesc = nil
	file_an_ethernet_kpi_proto_goTypes = nil
	file_an_ethernet_kpi_proto_depIdxs = nil
}
